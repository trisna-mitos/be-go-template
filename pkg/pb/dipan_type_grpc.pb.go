// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/pb/dipan_type.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DipanTypeService_CreateDipanType_FullMethodName = "/pb.DipanTypeService/CreateDipanType"
	DipanTypeService_GetDipanType_FullMethodName    = "/pb.DipanTypeService/GetDipanType"
	DipanTypeService_ListDipanTypes_FullMethodName  = "/pb.DipanTypeService/ListDipanTypes"
	DipanTypeService_UpdateDipanType_FullMethodName = "/pb.DipanTypeService/UpdateDipanType"
	DipanTypeService_DeleteDipanType_FullMethodName = "/pb.DipanTypeService/DeleteDipanType"
)

// DipanTypeServiceClient is the client API for DipanTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DipanTypeServiceClient interface {
	CreateDipanType(ctx context.Context, in *CreateDipanTypeRequest, opts ...grpc.CallOption) (*DipanType, error)
	GetDipanType(ctx context.Context, in *GetDipanTypeRequest, opts ...grpc.CallOption) (*DipanType, error)
	ListDipanTypes(ctx context.Context, in *ListDipanTypesRequest, opts ...grpc.CallOption) (*ListDipanTypesResponse, error)
	UpdateDipanType(ctx context.Context, in *UpdateDipanTypeRequest, opts ...grpc.CallOption) (*DipanType, error)
	DeleteDipanType(ctx context.Context, in *DeleteDipanTypeRequest, opts ...grpc.CallOption) (*DeleteDipanTypeResponse, error)
}

type dipanTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDipanTypeServiceClient(cc grpc.ClientConnInterface) DipanTypeServiceClient {
	return &dipanTypeServiceClient{cc}
}

func (c *dipanTypeServiceClient) CreateDipanType(ctx context.Context, in *CreateDipanTypeRequest, opts ...grpc.CallOption) (*DipanType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DipanType)
	err := c.cc.Invoke(ctx, DipanTypeService_CreateDipanType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dipanTypeServiceClient) GetDipanType(ctx context.Context, in *GetDipanTypeRequest, opts ...grpc.CallOption) (*DipanType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DipanType)
	err := c.cc.Invoke(ctx, DipanTypeService_GetDipanType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dipanTypeServiceClient) ListDipanTypes(ctx context.Context, in *ListDipanTypesRequest, opts ...grpc.CallOption) (*ListDipanTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDipanTypesResponse)
	err := c.cc.Invoke(ctx, DipanTypeService_ListDipanTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dipanTypeServiceClient) UpdateDipanType(ctx context.Context, in *UpdateDipanTypeRequest, opts ...grpc.CallOption) (*DipanType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DipanType)
	err := c.cc.Invoke(ctx, DipanTypeService_UpdateDipanType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dipanTypeServiceClient) DeleteDipanType(ctx context.Context, in *DeleteDipanTypeRequest, opts ...grpc.CallOption) (*DeleteDipanTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDipanTypeResponse)
	err := c.cc.Invoke(ctx, DipanTypeService_DeleteDipanType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DipanTypeServiceServer is the server API for DipanTypeService service.
// All implementations must embed UnimplementedDipanTypeServiceServer
// for forward compatibility.
type DipanTypeServiceServer interface {
	CreateDipanType(context.Context, *CreateDipanTypeRequest) (*DipanType, error)
	GetDipanType(context.Context, *GetDipanTypeRequest) (*DipanType, error)
	ListDipanTypes(context.Context, *ListDipanTypesRequest) (*ListDipanTypesResponse, error)
	UpdateDipanType(context.Context, *UpdateDipanTypeRequest) (*DipanType, error)
	DeleteDipanType(context.Context, *DeleteDipanTypeRequest) (*DeleteDipanTypeResponse, error)
	mustEmbedUnimplementedDipanTypeServiceServer()
}

// UnimplementedDipanTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDipanTypeServiceServer struct{}

func (UnimplementedDipanTypeServiceServer) CreateDipanType(context.Context, *CreateDipanTypeRequest) (*DipanType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDipanType not implemented")
}
func (UnimplementedDipanTypeServiceServer) GetDipanType(context.Context, *GetDipanTypeRequest) (*DipanType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDipanType not implemented")
}
func (UnimplementedDipanTypeServiceServer) ListDipanTypes(context.Context, *ListDipanTypesRequest) (*ListDipanTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDipanTypes not implemented")
}
func (UnimplementedDipanTypeServiceServer) UpdateDipanType(context.Context, *UpdateDipanTypeRequest) (*DipanType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDipanType not implemented")
}
func (UnimplementedDipanTypeServiceServer) DeleteDipanType(context.Context, *DeleteDipanTypeRequest) (*DeleteDipanTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDipanType not implemented")
}
func (UnimplementedDipanTypeServiceServer) mustEmbedUnimplementedDipanTypeServiceServer() {}
func (UnimplementedDipanTypeServiceServer) testEmbeddedByValue()                          {}

// UnsafeDipanTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DipanTypeServiceServer will
// result in compilation errors.
type UnsafeDipanTypeServiceServer interface {
	mustEmbedUnimplementedDipanTypeServiceServer()
}

func RegisterDipanTypeServiceServer(s grpc.ServiceRegistrar, srv DipanTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedDipanTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DipanTypeService_ServiceDesc, srv)
}

func _DipanTypeService_CreateDipanType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDipanTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DipanTypeServiceServer).CreateDipanType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DipanTypeService_CreateDipanType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DipanTypeServiceServer).CreateDipanType(ctx, req.(*CreateDipanTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DipanTypeService_GetDipanType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDipanTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DipanTypeServiceServer).GetDipanType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DipanTypeService_GetDipanType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DipanTypeServiceServer).GetDipanType(ctx, req.(*GetDipanTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DipanTypeService_ListDipanTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDipanTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DipanTypeServiceServer).ListDipanTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DipanTypeService_ListDipanTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DipanTypeServiceServer).ListDipanTypes(ctx, req.(*ListDipanTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DipanTypeService_UpdateDipanType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDipanTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DipanTypeServiceServer).UpdateDipanType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DipanTypeService_UpdateDipanType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DipanTypeServiceServer).UpdateDipanType(ctx, req.(*UpdateDipanTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DipanTypeService_DeleteDipanType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDipanTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DipanTypeServiceServer).DeleteDipanType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DipanTypeService_DeleteDipanType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DipanTypeServiceServer).DeleteDipanType(ctx, req.(*DeleteDipanTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DipanTypeService_ServiceDesc is the grpc.ServiceDesc for DipanTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DipanTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DipanTypeService",
	HandlerType: (*DipanTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDipanType",
			Handler:    _DipanTypeService_CreateDipanType_Handler,
		},
		{
			MethodName: "GetDipanType",
			Handler:    _DipanTypeService_GetDipanType_Handler,
		},
		{
			MethodName: "ListDipanTypes",
			Handler:    _DipanTypeService_ListDipanTypes_Handler,
		},
		{
			MethodName: "UpdateDipanType",
			Handler:    _DipanTypeService_UpdateDipanType_Handler,
		},
		{
			MethodName: "DeleteDipanType",
			Handler:    _DipanTypeService_DeleteDipanType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/dipan_type.proto",
}
